using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.IO;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using DiscUtils;
using DiscUtils.Fat;
using DiscUtils.Hdi;

namespace PC98GamePatcher
{
    class FormatData {
        public int IplStart;
        public byte[] IplContent;
        public int PartInfoStart;
        public byte[] PartInfo;
        public int E5Start;
        public int BootloaderStart;
        public int BootloaderEnd;
        public int BpbStart;
        public byte[] BpbContent;
        public int FatStart;
        public int FatEnd;
        public byte[] FatContent;
        public int RootSectorStart;
        public int RootSectorEnd;
    }
    class StreamFormatter
    {
        private static int headerOffset = 0x1000;
        static FormatData img5 = new FormatData {
            IplStart = 0x1000 - headerOffset,
            IplContent = new byte[] { 0xEB, 0x0A, 0x90, 0x90, 0x49, 0x50, 0x4C, 0x31, 0x00, 0x00, 0x00, 0x1E, 0xA0, 0x84, 0x05, 0xB4, 0x8E, 0xCD, 0x1B, 0xA8, 0x20, 0x74, 0x22, 0x32, 0xDB, 0xB4, 0x14, 0xCD, 0x1B, 0x72, 0x1A, 0x80, 0xFB, 0x84, 0x75, 0x15, 0xE8, 0x96, 0x00, 0x73, 0x03, 0xEB, 0x6B, 0x90, 0xB4, 0x24, 0xBB, 0x00, 0x04, 0xB9, 0x30, 0x12, 0xBA, 0x40, 0x01, 0xCD, 0x1B, 0xBB, 0x00, 0x01, 0xB4, 0x84, 0xCD, 0x1B, 0xB4, 0x06, 0x33, 0xC9, 0x33, 0xD2, 0x50, 0x8C, 0xC8, 0x2D, 0xC0, 0x03, 0x8E, 0xC0, 0x58, 0x33, 0xED, 0xCD, 0x1B, 0x72, 0x41, 0xB4, 0x06, 0xBA, 0x01, 0x00, 0x81, 0xC5, 0x00, 0x08, 0xCD, 0x1B, 0x72, 0x34, 0xBA, 0x04, 0x00, 0xF7, 0xC3, 0x00, 0xAA, 0x74, 0x03, 0xBA, 0x02, 0x00, 0xB4, 0x06, 0xBB, 0x00, 0x1C, 0x81, 0xC5, 0x00, 0x08, 0xCD, 0x1B, 0x72, 0x1B, 0x50, 0x8B, 0xC5, 0xB1, 0x04, 0xD3, 0xE8, 0x8C, 0xC1, 0x03, 0xC1, 0x8B, 0xF0, 0x58, 0xE8, 0x15, 0x00, 0x2E, 0x89, 0x36, 0x0A, 0x00, 0x2E, 0xFF, 0x1E, 0x08, 0x00, 0xE8, 0x08, 0x00, 0xB4, 0x0E, 0xCD, 0x1B, 0xB9, 0x01, 0x00, 0xCB, 0x56, 0xA0, 0x84, 0x05, 0x32, 0xDB, 0xB4, 0x14, 0xCD, 0x1B, 0x72, 0x0E, 0x80, 0xFB, 0x84, 0x75, 0x09, 0x2E, 0xC6, 0x06, 0xC6, 0x49, 0x00, 0xE8, 0x02, 0x00, 0x5E, 0xC3, 0xB4, 0xB0, 0xBE, 0xC2, 0x49, 0xBA, 0x06, 0x00, 0x1E, 0x0E, 0x1F, 0xCD, 0x1B, 0xB4, 0xB0, 0xCD, 0x1B, 0x1F, 0xC3, 0x1E, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x09, 0x00, 0x55, 0xAA },
            PartInfoStart = 0x1100 - headerOffset,
            PartInfo = new byte[] { 0xA1, 0x81, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x96, 0x00, 0x4D, 0x53, 0x2D, 0x44, 0x4F, 0x53, 0x20, 0x36, 0x2E, 0x32, 0x30, 0x20, 0x20, 0x20, 0x20, 0x20 },
            E5Start = 0x1200 - headerOffset,
            BootloaderStart = 0x1400 - headerOffset,
            BootloaderEnd = 0x3400 - headerOffset,
            BpbStart = 0x9400 - headerOffset,
            BpbContent = new byte[] { 0xEB, 0x45, 0x90, 0x4E, 0x45, 0x43, 0x20, 0x20, 0x36, 0x2E, 0x32, 0x00, 0x04, 0x02, 0x01, 0x00, 0x02, 0x00, 0x02, 0x56, 0x13, 0xF8, 0x04, 0x00, 0x21, 0x00, 0x04, 0x00, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x29, 0xE1, 0x1C, 0x09, 0x2F, 0x24, 0x49, 0x4E, 0x53, 0x54, 0x41, 0x4C, 0x24, 0x24, 0x24, 0x24, 0x46, 0x41, 0x54, 0x31, 0x32, 0x20, 0x20, 0x20, 0x84, 0x00, 0x00, 0x00, 0x64, 0x00, 0x00, 0x01, 0x00, 0x33, 0xC0, 0x8E, 0xC0, 0x8E, 0xD0, 0xBC, 0x8E, 0x02, 0x56, 0x0E, 0x1F, 0xA1, 0x16, 0x00, 0x32, 0xED, 0x8A, 0x0E, 0x10, 0x00, 0xF7, 0xE1, 0x03, 0x06, 0x0E, 0x00, 0xF7, 0x26, 0x0B, 0x00, 0xF7, 0x36, 0x44, 0x00, 0x8B, 0x0E, 0x3E, 0x00, 0x03, 0xC8, 0x8B, 0x16, 0x40, 0x00, 0x83, 0xD2, 0x00, 0x8B, 0x1E, 0x44, 0x00, 0xBD, 0x00, 0x06, 0x8B, 0xFD, 0xE8, 0xEE, 0x00, 0x73, 0x03, 0xE9, 0xAE, 0x00, 0xB8, 0xF2, 0x70, 0xBE, 0x84, 0x72, 0x2B, 0xF0, 0x26, 0xF6, 0x45, 0x0B, 0x08, 0x74, 0x03, 0x83, 0xC7, 0x20, 0xB9, 0x0B, 0x00, 0xFC, 0xF3, 0xA6, 0x74, 0x03, 0xE9, 0x8C, 0x00, 0xBF, 0x20, 0x06, 0x26, 0xF6, 0x45, 0xEB, 0x08, 0x74, 0x03, 0x83, 0xC7, 0x20, 0xB8, 0xF2, 0x70, 0xBE, 0x8F, 0x72, 0x2B, 0xF0, 0xB9, 0x0B, 0x00, 0xF3, 0xA6, 0x75, 0x70, 0x06, 0x1F, 0x33, 0xC9, 0x2E, 0x8B, 0x0E, 0x42, 0x00, 0x2E, 0x03, 0x0E, 0x3E, 0x00, 0x2E, 0x8B, 0x16, 0x40, 0x00, 0x83, 0xD2, 0x00, 0xBB, 0x00, 0xF8, 0xB8, 0x60, 0x00, 0x8E, 0xC0, 0x33, 0xED, 0xE8, 0x8D, 0x00, 0x72, 0x50, 0x53, 0xBB, 0x00, 0x01, 0x36, 0xA0, 0x84, 0x05, 0x24, 0x7F, 0xB4, 0x84, 0x52, 0x51, 0xCD, 0x1B, 0x59, 0x5A, 0x58, 0x52, 0x33, 0xD2, 0xF7, 0xF3, 0x5A, 0x03, 0xC8, 0x83, 0xD2, 0x00, 0xBB, 0x00, 0x08, 0xBD, 0x00, 0x10, 0x8E, 0xC5, 0x33, 0xED, 0xE8, 0x60, 0x00, 0x72, 0x23, 0xBD, 0xE0, 0x0F, 0x8E, 0xC5, 0x8E, 0xDD, 0xBE, 0x00, 0x02, 0xBF, 0x00, 0x00, 0xB9, 0x00, 0x08, 0xFC, 0xF3, 0xA4, 0xBD, 0x60, 0x00, 0x8E, 0xC5, 0x5E, 0xEA, 0x00, 0x00, 0x60, 0x00, 0xBE, 0x9A, 0x72, 0xEB, 0x03, 0xBE, 0xAA, 0x72, 0xB8, 0xF2, 0x70, 0x2B, 0xF0, 0x06, 0x33, 0xC0, 0x8E, 0xC0, 0xB8, 0x00, 0xA0, 0x26, 0xF6, 0x06, 0x01, 0x05, 0x08, 0x74, 0x03, 0xB8, 0x00, 0xE0, 0x07, 0xBB, 0x40, 0x01, 0x8C, 0xCA, 0x8E, 0xDA, 0x8A, 0x0C, 0x0A, 0xC9, 0x74, 0x0B, 0x8E, 0xD8, 0x88, 0x0F, 0x43, 0x43, 0x46, 0x8E, 0xDA, 0xEB, 0xEF, 0xB0, 0x06, 0xE6, 0x37, 0xF4, 0xEB, 0xFD, 0x36, 0xA0, 0x84, 0x05, 0x24, 0x7F, 0x36, 0xC6, 0x06, 0x8E, 0x02, 0x03, 0xB4, 0x06, 0xCD, 0x1B, 0x73, 0x0E, 0x36, 0xFE, 0x0E, 0x8E, 0x02, 0x74, 0x06, 0xB4, 0x07, 0xCD, 0x1B, 0xEB, 0xED, 0xF9, 0xC3, 0x49, 0x4F, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x53, 0x59, 0x53, 0x4D, 0x53, 0x44, 0x4F, 0x53, 0x20, 0x20, 0x20, 0x53, 0x59, 0x53, 0x4E, 0x4F, 0x20, 0x53, 0x59, 0x53, 0x54, 0x45, 0x4D, 0x20, 0x46, 0x49, 0x4C, 0x45, 0x53, 0x00, 0x49, 0x2F, 0x4F, 0x20, 0x45, 0x52, 0x52, 0x4F, 0x52, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },
            FatStart = 0x9800 - headerOffset,
            FatEnd = 0xA800 - headerOffset,
            FatContent = new byte[]{ 0xFE, 0xFF, 0xFF},
            RootSectorStart = 0xB800 - headerOffset,
            RootSectorEnd = 0xF800 - headerOffset,
        };

        private static FormatData img10 = new FormatData {
            IplStart = 0x1000 - headerOffset,
            IplContent = new byte[] { 0xEB, 0x0A, 0x90, 0x90, 0x49, 0x50, 0x4C, 0x31, 0x00, 0x00, 0x00, 0x1E, 0xA0, 0x84, 0x05, 0xB4, 0x8E, 0xCD, 0x1B, 0xA8, 0x20, 0x74, 0x22, 0x32, 0xDB, 0xB4, 0x14, 0xCD, 0x1B, 0x72, 0x1A, 0x80, 0xFB, 0x84, 0x75, 0x15, 0xE8, 0x96, 0x00, 0x73, 0x03, 0xEB, 0x6B, 0x90, 0xB4, 0x24, 0xBB, 0x00, 0x04, 0xB9, 0x30, 0x12, 0xBA, 0x40, 0x01, 0xCD, 0x1B, 0xBB, 0x00, 0x01, 0xB4, 0x84, 0xCD, 0x1B, 0xB4, 0x06, 0x33, 0xC9, 0x33, 0xD2, 0x50, 0x8C, 0xC8, 0x2D, 0xC0, 0x03, 0x8E, 0xC0, 0x58, 0x33, 0xED, 0xCD, 0x1B, 0x72, 0x41, 0xB4, 0x06, 0xBA, 0x01, 0x00, 0x81, 0xC5, 0x00, 0x08, 0xCD, 0x1B, 0x72, 0x34, 0xBA, 0x04, 0x00, 0xF7, 0xC3, 0x00, 0xAA, 0x74, 0x03, 0xBA, 0x02, 0x00, 0xB4, 0x06, 0xBB, 0x00, 0x1C, 0x81, 0xC5, 0x00, 0x08, 0xCD, 0x1B, 0x72, 0x1B, 0x50, 0x8B, 0xC5, 0xB1, 0x04, 0xD3, 0xE8, 0x8C, 0xC1, 0x03, 0xC1, 0x8B, 0xF0, 0x58, 0xE8, 0x15, 0x00, 0x2E, 0x89, 0x36, 0x0A, 0x00, 0x2E, 0xFF, 0x1E, 0x08, 0x00, 0xE8, 0x08, 0x00, 0xB4, 0x0E, 0xCD, 0x1B, 0xB9, 0x01, 0x00, 0xCB, 0x56, 0xA0, 0x84, 0x05, 0x32, 0xDB, 0xB4, 0x14, 0xCD, 0x1B, 0x72, 0x0E, 0x80, 0xFB, 0x84, 0x75, 0x09, 0x2E, 0xC6, 0x06, 0xC6, 0x49, 0x00, 0xE8, 0x02, 0x00, 0x5E, 0xC3, 0xB4, 0xB0, 0xBE, 0xC2, 0x49, 0xBA, 0x06, 0x00, 0x1E, 0x0E, 0x1F, 0xCD, 0x1B, 0xB4, 0xB0, 0xCD, 0x1B, 0x1F, 0xC3, 0x1E, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x09, 0x00, 0x55, 0xAA },
            PartInfoStart = 0x1100 - headerOffset,
            PartInfo = new byte[] { 0xA1, 0x81, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x2C, 0x01, 0x4D, 0x53, 0x2D, 0x44, 0x4F, 0x53, 0x20, 0x36, 0x2E, 0x32, 0x30, 0x20, 0x20, 0x20, 0x20, 0x20 },
            E5Start = 0x1200 - headerOffset,
            BootloaderStart = 0x1400 - headerOffset,
            BootloaderEnd = 0x3400 - headerOffset,
            BpbStart = 0x9400 - headerOffset,
            BpbContent = new byte[] { 0xEB, 0x45, 0x90, 0x4E, 0x45, 0x43, 0x20, 0x20, 0x36, 0x2E, 0x32, 0x00, 0x04, 0x04, 0x01, 0x00, 0x02, 0x00, 0x03, 0xAC, 0x26, 0xF8, 0x04, 0x00, 0x21, 0x00, 0x04, 0x00, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x29, 0xE3, 0x1C, 0x09, 0x0B, 0x24, 0x49, 0x4E, 0x53, 0x54, 0x41, 0x4C, 0x24, 0x24, 0x24, 0x24, 0x46, 0x41, 0x54, 0x31, 0x32, 0x20, 0x20, 0x20, 0x84, 0x00, 0x00, 0x00, 0x84, 0x00, 0x00, 0x01, 0x00, 0x33, 0xC0, 0x8E, 0xC0, 0x8E, 0xD0, 0xBC, 0x8E, 0x02, 0x56, 0x0E, 0x1F, 0xA1, 0x16, 0x00, 0x32, 0xED, 0x8A, 0x0E, 0x10, 0x00, 0xF7, 0xE1, 0x03, 0x06, 0x0E, 0x00, 0xF7, 0x26, 0x0B, 0x00, 0xF7, 0x36, 0x44, 0x00, 0x8B, 0x0E, 0x3E, 0x00, 0x03, 0xC8, 0x8B, 0x16, 0x40, 0x00, 0x83, 0xD2, 0x00, 0x8B, 0x1E, 0x44, 0x00, 0xBD, 0x00, 0x06, 0x8B, 0xFD, 0xE8, 0xEE, 0x00, 0x73, 0x03, 0xE9, 0xAE, 0x00, 0xB8, 0xF2, 0x70, 0xBE, 0x84, 0x72, 0x2B, 0xF0, 0x26, 0xF6, 0x45, 0x0B, 0x08, 0x74, 0x03, 0x83, 0xC7, 0x20, 0xB9, 0x0B, 0x00, 0xFC, 0xF3, 0xA6, 0x74, 0x03, 0xE9, 0x8C, 0x00, 0xBF, 0x20, 0x06, 0x26, 0xF6, 0x45, 0xEB, 0x08, 0x74, 0x03, 0x83, 0xC7, 0x20, 0xB8, 0xF2, 0x70, 0xBE, 0x8F, 0x72, 0x2B, 0xF0, 0xB9, 0x0B, 0x00, 0xF3, 0xA6, 0x75, 0x70, 0x06, 0x1F, 0x33, 0xC9, 0x2E, 0x8B, 0x0E, 0x42, 0x00, 0x2E, 0x03, 0x0E, 0x3E, 0x00, 0x2E, 0x8B, 0x16, 0x40, 0x00, 0x83, 0xD2, 0x00, 0xBB, 0x00, 0xF8, 0xB8, 0x60, 0x00, 0x8E, 0xC0, 0x33, 0xED, 0xE8, 0x8D, 0x00, 0x72, 0x50, 0x53, 0xBB, 0x00, 0x01, 0x36, 0xA0, 0x84, 0x05, 0x24, 0x7F, 0xB4, 0x84, 0x52, 0x51, 0xCD, 0x1B, 0x59, 0x5A, 0x58, 0x52, 0x33, 0xD2, 0xF7, 0xF3, 0x5A, 0x03, 0xC8, 0x83, 0xD2, 0x00, 0xBB, 0x00, 0x08, 0xBD, 0x00, 0x10, 0x8E, 0xC5, 0x33, 0xED, 0xE8, 0x60, 0x00, 0x72, 0x23, 0xBD, 0xE0, 0x0F, 0x8E, 0xC5, 0x8E, 0xDD, 0xBE, 0x00, 0x02, 0xBF, 0x00, 0x00, 0xB9, 0x00, 0x08, 0xFC, 0xF3, 0xA4, 0xBD, 0x60, 0x00, 0x8E, 0xC5, 0x5E, 0xEA, 0x00, 0x00, 0x60, 0x00, 0xBE, 0x9A, 0x72, 0xEB, 0x03, 0xBE, 0xAA, 0x72, 0xB8, 0xF2, 0x70, 0x2B, 0xF0, 0x06, 0x33, 0xC0, 0x8E, 0xC0, 0xB8, 0x00, 0xA0, 0x26, 0xF6, 0x06, 0x01, 0x05, 0x08, 0x74, 0x03, 0xB8, 0x00, 0xE0, 0x07, 0xBB, 0x40, 0x01, 0x8C, 0xCA, 0x8E, 0xDA, 0x8A, 0x0C, 0x0A, 0xC9, 0x74, 0x0B, 0x8E, 0xD8, 0x88, 0x0F, 0x43, 0x43, 0x46, 0x8E, 0xDA, 0xEB, 0xEF, 0xB0, 0x06, 0xE6, 0x37, 0xF4, 0xEB, 0xFD, 0x36, 0xA0, 0x84, 0x05, 0x24, 0x7F, 0x36, 0xC6, 0x06, 0x8E, 0x02, 0x03, 0xB4, 0x06, 0xCD, 0x1B, 0x73, 0x0E, 0x36, 0xFE, 0x0E, 0x8E, 0x02, 0x74, 0x06, 0xB4, 0x07, 0xCD, 0x1B, 0xEB, 0xED, 0xF9, 0xC3, 0x49, 0x4F, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x53, 0x59, 0x53, 0x4D, 0x53, 0x44, 0x4F, 0x53, 0x20, 0x20, 0x20, 0x53, 0x59, 0x53, 0x4E, 0x4F, 0x20, 0x53, 0x59, 0x53, 0x54, 0x45, 0x4D, 0x20, 0x46, 0x49, 0x4C, 0x45, 0x53, 0x00, 0x49, 0x2F, 0x4F, 0x20, 0x45, 0x52, 0x52, 0x4F, 0x52, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, },
            FatStart = 0x9800 - headerOffset,
            FatEnd = 0xa800 - headerOffset,
            FatContent = new byte[] { 0xFE, 0xFF, 0xFF },
            RootSectorStart = 0xB800 - headerOffset,
            RootSectorEnd = 0x11800 - headerOffset,
        };

        private static FormatData img15 = new FormatData {
            IplStart = 0x1000 - headerOffset,
            IplContent = new byte[] { 0xEB, 0x0A, 0x90, 0x90, 0x49, 0x50, 0x4C, 0x31, 0x00, 0x00, 0x00, 0x1E, 0xA0, 0x84, 0x05, 0xB4, 0x8E, 0xCD, 0x1B, 0xA8, 0x20, 0x74, 0x22, 0x32, 0xDB, 0xB4, 0x14, 0xCD, 0x1B, 0x72, 0x1A, 0x80, 0xFB, 0x84, 0x75, 0x15, 0xE8, 0x96, 0x00, 0x73, 0x03, 0xEB, 0x6B, 0x90, 0xB4, 0x24, 0xBB, 0x00, 0x04, 0xB9, 0x30, 0x12, 0xBA, 0x40, 0x01, 0xCD, 0x1B, 0xBB, 0x00, 0x01, 0xB4, 0x84, 0xCD, 0x1B, 0xB4, 0x06, 0x33, 0xC9, 0x33, 0xD2, 0x50, 0x8C, 0xC8, 0x2D, 0xC0, 0x03, 0x8E, 0xC0, 0x58, 0x33, 0xED, 0xCD, 0x1B, 0x72, 0x41, 0xB4, 0x06, 0xBA, 0x01, 0x00, 0x81, 0xC5, 0x00, 0x08, 0xCD, 0x1B, 0x72, 0x34, 0xBA, 0x04, 0x00, 0xF7, 0xC3, 0x00, 0xAA, 0x74, 0x03, 0xBA, 0x02, 0x00, 0xB4, 0x06, 0xBB, 0x00, 0x1C, 0x81, 0xC5, 0x00, 0x08, 0xCD, 0x1B, 0x72, 0x1B, 0x50, 0x8B, 0xC5, 0xB1, 0x04, 0xD3, 0xE8, 0x8C, 0xC1, 0x03, 0xC1, 0x8B, 0xF0, 0x58, 0xE8, 0x15, 0x00, 0x2E, 0x89, 0x36, 0x0A, 0x00, 0x2E, 0xFF, 0x1E, 0x08, 0x00, 0xE8, 0x08, 0x00, 0xB4, 0x0E, 0xCD, 0x1B, 0xB9, 0x01, 0x00, 0xCB, 0x56, 0xA0, 0x84, 0x05, 0x32, 0xDB, 0xB4, 0x14, 0xCD, 0x1B, 0x72, 0x0E, 0x80, 0xFB, 0x84, 0x75, 0x09, 0x2E, 0xC6, 0x06, 0xC6, 0x49, 0x00, 0xE8, 0x02, 0x00, 0x5E, 0xC3, 0xB4, 0xB0, 0xBE, 0xC2, 0x49, 0xBA, 0x06, 0x00, 0x1E, 0x0E, 0x1F, 0xCD, 0x1B, 0xB4, 0xB0, 0xCD, 0x1B, 0x1F, 0xC3, 0x1E, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x09, 0x00, 0x55, 0xAA, },
            PartInfoStart = 0x1100 - headerOffset,
            PartInfo = new byte[] { 0x0A1, 0x081, 0x000, 0x000, 0x000, 0x000, 0x001, 0x000, 0x000, 0x000, 0x001, 0x000, 0x000, 0x000, 0x02C, 0x001, 0x04D, 0x053, 0x02D, 0x044, 0x04F, 0x053, 0x020, 0x036, 0x02E, 0x032, 0x030, 0x020, 0x020, 0x020, 0x020, 0x020, },
            E5Start = 0x1200 - headerOffset,
            BootloaderStart = 0x1400 - headerOffset,
            BootloaderEnd = 0x3400 - headerOffset,
            BpbStart = 0xD600 - headerOffset,
            BpbContent = new byte[] { 0xEB, 0x45, 0x90, 0x4E, 0x45, 0x43, 0x20, 0x20, 0x36, 0x2E, 0x32, 0x00, 0x04, 0x04, 0x01, 0x00, 0x02, 0x00, 0x04, 0x02, 0x3A, 0xF8, 0x06, 0x00, 0x21, 0x00, 0x06, 0x00, 0xC6, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x29, 0xE4, 0x1C, 0x09, 0x27, 0x24, 0x49, 0x4E, 0x53, 0x54, 0x41, 0x4C, 0x24, 0x24, 0x24, 0x24, 0x46, 0x41, 0x54, 0x31, 0x32, 0x20, 0x20, 0x20, 0xC6, 0x00, 0x00, 0x00, 0xB4, 0x00, 0x00, 0x01, 0x00, 0x33, 0xC0, 0x8E, 0xC0, 0x8E, 0xD0, 0xBC, 0x8E, 0x02, 0x56, 0x0E, 0x1F, 0xA1, 0x16, 0x00, 0x32, 0xED, 0x8A, 0x0E, 0x10, 0x00, 0xF7, 0xE1, 0x03, 0x06, 0x0E, 0x00, 0xF7, 0x26, 0x0B, 0x00, 0xF7, 0x36, 0x44, 0x00, 0x8B, 0x0E, 0x3E, 0x00, 0x03, 0xC8, 0x8B, 0x16, 0x40, 0x00, 0x83, 0xD2, 0x00, 0x8B, 0x1E, 0x44, 0x00, 0xBD, 0x00, 0x06, 0x8B, 0xFD, 0xE8, 0xEE, 0x00, 0x73, 0x03, 0xE9, 0xAE, 0x00, 0xB8, 0xF2, 0x70, 0xBE, 0x84, 0x72, 0x2B, 0xF0, 0x26, 0xF6, 0x45, 0x0B, 0x08, 0x74, 0x03, 0x83, 0xC7, 0x20, 0xB9, 0x0B, 0x00, 0xFC, 0xF3, 0xA6, 0x74, 0x03, 0xE9, 0x8C, 0x00, 0xBF, 0x20, 0x06, 0x26, 0xF6, 0x45, 0xEB, 0x08, 0x74, 0x03, 0x83, 0xC7, 0x20, 0xB8, 0xF2, 0x70, 0xBE, 0x8F, 0x72, 0x2B, 0xF0, 0xB9, 0x0B, 0x00, 0xF3, 0xA6, 0x75, 0x70, 0x06, 0x1F, 0x33, 0xC9, 0x2E, 0x8B, 0x0E, 0x42, 0x00, 0x2E, 0x03, 0x0E, 0x3E, 0x00, 0x2E, 0x8B, 0x16, 0x40, 0x00, 0x83, 0xD2, 0x00, 0xBB, 0x00, 0xF8, 0xB8, 0x60, 0x00, 0x8E, 0xC0, 0x33, 0xED, 0xE8, 0x8D, 0x00, 0x72, 0x50, 0x53, 0xBB, 0x00, 0x01, 0x36, 0xA0, 0x84, 0x05, 0x24, 0x7F, 0xB4, 0x84, 0x52, 0x51, 0xCD, 0x1B, 0x59, 0x5A, 0x58, 0x52, 0x33, 0xD2, 0xF7, 0xF3, 0x5A, 0x03, 0xC8, 0x83, 0xD2, 0x00, 0xBB, 0x00, 0x08, 0xBD, 0x00, 0x10, 0x8E, 0xC5, 0x33, 0xED, 0xE8, 0x60, 0x00, 0x72, 0x23, 0xBD, 0xE0, 0x0F, 0x8E, 0xC5, 0x8E, 0xDD, 0xBE, 0x00, 0x02, 0xBF, 0x00, 0x00, 0xB9, 0x00, 0x08, 0xFC, 0xF3, 0xA4, 0xBD, 0x60, 0x00, 0x8E, 0xC5, 0x5E, 0xEA, 0x00, 0x00, 0x60, 0x00, 0xBE, 0x9A, 0x72, 0xEB, 0x03, 0xBE, 0xAA, 0x72, 0xB8, 0xF2, 0x70, 0x2B, 0xF0, 0x06, 0x33, 0xC0, 0x8E, 0xC0, 0xB8, 0x00, 0xA0, 0x26, 0xF6, 0x06, 0x01, 0x05, 0x08, 0x74, 0x03, 0xB8, 0x00, 0xE0, 0x07, 0xBB, 0x40, 0x01, 0x8C, 0xCA, 0x8E, 0xDA, 0x8A, 0x0C, 0x0A, 0xC9, 0x74, 0x0B, 0x8E, 0xD8, 0x88, 0x0F, 0x43, 0x43, 0x46, 0x8E, 0xDA, 0xEB, 0xEF, 0xB0, 0x06, 0xE6, 0x37, 0xF4, 0xEB, 0xFD, 0x36, 0xA0, 0x84, 0x05, 0x24, 0x7F, 0x36, 0xC6, 0x06, 0x8E, 0x02, 0x03, 0xB4, 0x06, 0xCD, 0x1B, 0x73, 0x0E, 0x36, 0xFE, 0x0E, 0x8E, 0x02, 0x74, 0x06, 0xB4, 0x07, 0xCD, 0x1B, 0xEB, 0xED, 0xF9, 0xC3, 0x49, 0x4F, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x53, 0x59, 0x53, 0x4D, 0x53, 0x44, 0x4F, 0x53, 0x20, 0x20, 0x20, 0x53, 0x59, 0x53, 0x4E, 0x4F, 0x20, 0x53, 0x59, 0x53, 0x54, 0x45, 0x4D, 0x20, 0x46, 0x49, 0x4C, 0x45, 0x53, 0x00, 0x49, 0x2F, 0x4F, 0x20, 0x45, 0x52, 0x52, 0x4F, 0x52, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, },
            FatStart = 0xDA00 - headerOffset,
            FatEnd = 0xf200 - headerOffset,
            FatContent = new byte[] { 0xFE, 0xFF, 0xFF },
            RootSectorStart = 0x10A00 - headerOffset,
            RootSectorEnd = 0x18A00 - headerOffset,
        };

        private static FormatData img20 = new FormatData {
            IplStart = 0x1000 - headerOffset,
            IplContent = new byte[] { 0xEB, 0x0A, 0x90, 0x90, 0x49, 0x50, 0x4C, 0x31, 0x00, 0x00, 0x00, 0x1E, 0xA0, 0x84, 0x05, 0xB4, 0x8E, 0xCD, 0x1B, 0xA8, 0x20, 0x74, 0x22, 0x32, 0xDB, 0xB4, 0x14, 0xCD, 0x1B, 0x72, 0x1A, 0x80, 0xFB, 0x84, 0x75, 0x15, 0xE8, 0x96, 0x00, 0x73, 0x03, 0xEB, 0x6B, 0x90, 0xB4, 0x24, 0xBB, 0x00, 0x04, 0xB9, 0x30, 0x12, 0xBA, 0x40, 0x01, 0xCD, 0x1B, 0xBB, 0x00, 0x01, 0xB4, 0x84, 0xCD, 0x1B, 0xB4, 0x06, 0x33, 0xC9, 0x33, 0xD2, 0x50, 0x8C, 0xC8, 0x2D, 0xC0, 0x03, 0x8E, 0xC0, 0x58, 0x33, 0xED, 0xCD, 0x1B, 0x72, 0x41, 0xB4, 0x06, 0xBA, 0x01, 0x00, 0x81, 0xC5, 0x00, 0x08, 0xCD, 0x1B, 0x72, 0x34, 0xBA, 0x04, 0x00, 0xF7, 0xC3, 0x00, 0xAA, 0x74, 0x03, 0xBA, 0x02, 0x00, 0xB4, 0x06, 0xBB, 0x00, 0x1C, 0x81, 0xC5, 0x00, 0x08, 0xCD, 0x1B, 0x72, 0x1B, 0x50, 0x8B, 0xC5, 0xB1, 0x04, 0xD3, 0xE8, 0x8C, 0xC1, 0x03, 0xC1, 0x8B, 0xF0, 0x58, 0xE8, 0x15, 0x00, 0x2E, 0x89, 0x36, 0x0A, 0x00, 0x2E, 0xFF, 0x1E, 0x08, 0x00, 0xE8, 0x08, 0x00, 0xB4, 0x0E, 0xCD, 0x1B, 0xB9, 0x01, 0x00, 0xCB, 0x56, 0xA0, 0x84, 0x05, 0x32, 0xDB, 0xB4, 0x14, 0xCD, 0x1B, 0x72, 0x0E, 0x80, 0xFB, 0x84, 0x75, 0x09, 0x2E, 0xC6, 0x06, 0xC6, 0x49, 0x00, 0xE8, 0x02, 0x00, 0x5E, 0xC3, 0xB4, 0xB0, 0xBE, 0xC2, 0x49, 0xBA, 0x06, 0x00, 0x1E, 0x0E, 0x1F, 0xCD, 0x1B, 0xB4, 0xB0, 0xCD, 0x1B, 0x1F, 0xC3, 0x1E, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x09, 0x00, 0x55, 0xAA, },
            PartInfoStart = 0x1100 - headerOffset,
            PartInfo = new byte[] { 0xA1, 0x81, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x2C, 0x01, 0x4D, 0x53, 0x2D, 0x44, 0x4F, 0x53, 0x20, 0x36, 0x2E, 0x32, 0x30, 0x20, 0x20, 0x20, 0x20, 0x20, },
            E5Start = 0x1200 - headerOffset,
            BootloaderStart = 0x1400 - headerOffset,
            BootloaderEnd = 0x3400 - headerOffset,
            BpbStart = 0x11800 - headerOffset,
            BpbContent = new byte[] { 0xEB, 0x45, 0x90, 0x4E, 0x45, 0x43, 0x20, 0x20, 0x36, 0x2E, 0x32, 0x00, 0x04, 0x08, 0x01, 0x00, 0x02, 0x00, 0x05, 0x58, 0x4D, 0xF8, 0x04, 0x00, 0x21, 0x00, 0x08, 0x00, 0x08, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x29, 0xF9, 0x1C, 0x09, 0x28, 0x24, 0x49, 0x4E, 0x53, 0x54, 0x41, 0x4C, 0x24, 0x24, 0x24, 0x24, 0x46, 0x41, 0x54, 0x31, 0x32, 0x20, 0x20, 0x20, 0x08, 0x01, 0x00, 0x00, 0xC4, 0x00, 0x00, 0x01, 0x00, 0x33, 0xC0, 0x8E, 0xC0, 0x8E, 0xD0, 0xBC, 0x8E, 0x02, 0x56, 0x0E, 0x1F, 0xA1, 0x16, 0x00, 0x32, 0xED, 0x8A, 0x0E, 0x10, 0x00, 0xF7, 0xE1, 0x03, 0x06, 0x0E, 0x00, 0xF7, 0x26, 0x0B, 0x00, 0xF7, 0x36, 0x44, 0x00, 0x8B, 0x0E, 0x3E, 0x00, 0x03, 0xC8, 0x8B, 0x16, 0x40, 0x00, 0x83, 0xD2, 0x00, 0x8B, 0x1E, 0x44, 0x00, 0xBD, 0x00, 0x06, 0x8B, 0xFD, 0xE8, 0xEE, 0x00, 0x73, 0x03, 0xE9, 0xAE, 0x00, 0xB8, 0xF2, 0x70, 0xBE, 0x84, 0x72, 0x2B, 0xF0, 0x26, 0xF6, 0x45, 0x0B, 0x08, 0x74, 0x03, 0x83, 0xC7, 0x20, 0xB9, 0x0B, 0x00, 0xFC, 0xF3, 0xA6, 0x74, 0x03, 0xE9, 0x8C, 0x00, 0xBF, 0x20, 0x06, 0x26, 0xF6, 0x45, 0xEB, 0x08, 0x74, 0x03, 0x83, 0xC7, 0x20, 0xB8, 0xF2, 0x70, 0xBE, 0x8F, 0x72, 0x2B, 0xF0, 0xB9, 0x0B, 0x00, 0xF3, 0xA6, 0x75, 0x70, 0x06, 0x1F, 0x33, 0xC9, 0x2E, 0x8B, 0x0E, 0x42, 0x00, 0x2E, 0x03, 0x0E, 0x3E, 0x00, 0x2E, 0x8B, 0x16, 0x40, 0x00, 0x83, 0xD2, 0x00, 0xBB, 0x00, 0xF8, 0xB8, 0x60, 0x00, 0x8E, 0xC0, 0x33, 0xED, 0xE8, 0x8D, 0x00, 0x72, 0x50, 0x53, 0xBB, 0x00, 0x01, 0x36, 0xA0, 0x84, 0x05, 0x24, 0x7F, 0xB4, 0x84, 0x52, 0x51, 0xCD, 0x1B, 0x59, 0x5A, 0x58, 0x52, 0x33, 0xD2, 0xF7, 0xF3, 0x5A, 0x03, 0xC8, 0x83, 0xD2, 0x00, 0xBB, 0x00, 0x08, 0xBD, 0x00, 0x10, 0x8E, 0xC5, 0x33, 0xED, 0xE8, 0x60, 0x00, 0x72, 0x23, 0xBD, 0xE0, 0x0F, 0x8E, 0xC5, 0x8E, 0xDD, 0xBE, 0x00, 0x02, 0xBF, 0x00, 0x00, 0xB9, 0x00, 0x08, 0xFC, 0xF3, 0xA4, 0xBD, 0x60, 0x00, 0x8E, 0xC5, 0x5E, 0xEA, 0x00, 0x00, 0x60, 0x00, 0xBE, 0x9A, 0x72, 0xEB, 0x03, 0xBE, 0xAA, 0x72, 0xB8, 0xF2, 0x70, 0x2B, 0xF0, 0x06, 0x33, 0xC0, 0x8E, 0xC0, 0xB8, 0x00, 0xA0, 0x26, 0xF6, 0x06, 0x01, 0x05, 0x08, 0x74, 0x03, 0xB8, 0x00, 0xE0, 0x07, 0xBB, 0x40, 0x01, 0x8C, 0xCA, 0x8E, 0xDA, 0x8A, 0x0C, 0x0A, 0xC9, 0x74, 0x0B, 0x8E, 0xD8, 0x88, 0x0F, 0x43, 0x43, 0x46, 0x8E, 0xDA, 0xEB, 0xEF, 0xB0, 0x06, 0xE6, 0x37, 0xF4, 0xEB, 0xFD, 0x36, 0xA0, 0x84, 0x05, 0x24, 0x7F, 0x36, 0xC6, 0x06, 0x8E, 0x02, 0x03, 0xB4, 0x06, 0xCD, 0x1B, 0x73, 0x0E, 0x36, 0xFE, 0x0E, 0x8E, 0x02, 0x74, 0x06, 0xB4, 0x07, 0xCD, 0x1B, 0xEB, 0xED, 0xF9, 0xC3, 0x49, 0x4F, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x53, 0x59, 0x53, 0x4D, 0x53, 0x44, 0x4F, 0x53, 0x20, 0x20, 0x20, 0x53, 0x59, 0x53, 0x4E, 0x4F, 0x20, 0x53, 0x59, 0x53, 0x54, 0x45, 0x4D, 0x20, 0x46, 0x49, 0x4C, 0x45, 0x53, 0x00, 0x49, 0x2F, 0x4F, 0x20, 0x45, 0x52, 0x52, 0x4F, 0x52, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, },
            FatStart = 0x11C00 - headerOffset,
            FatEnd = 0x12C00 - headerOffset,
            FatContent = new byte[] { 0xFE, 0xFF, 0xFF },
            RootSectorStart = 0x13C00 - headerOffset,
            RootSectorEnd = 0x1DC00 - headerOffset,
        };

        private static FormatData img30 = new FormatData {
            IplStart = 0x1000 - headerOffset,
            IplContent = new byte[] { 0xEB, 0x0A, 0x90, 0x90, 0x49, 0x50, 0x4C, 0x31, 0x00, 0x00, 0x00, 0x1E, 0xA0, 0x84, 0x05, 0xB4, 0x8E, 0xCD, 0x1B, 0xA8, 0x20, 0x74, 0x22, 0x32, 0xDB, 0xB4, 0x14, 0xCD, 0x1B, 0x72, 0x1A, 0x80, 0xFB, 0x84, 0x75, 0x15, 0xE8, 0x96, 0x00, 0x73, 0x03, 0xEB, 0x6B, 0x90, 0xB4, 0x24, 0xBB, 0x00, 0x04, 0xB9, 0x30, 0x12, 0xBA, 0x40, 0x01, 0xCD, 0x1B, 0xBB, 0x00, 0x01, 0xB4, 0x84, 0xCD, 0x1B, 0xB4, 0x06, 0x33, 0xC9, 0x33, 0xD2, 0x50, 0x8C, 0xC8, 0x2D, 0xC0, 0x03, 0x8E, 0xC0, 0x58, 0x33, 0xED, 0xCD, 0x1B, 0x72, 0x41, 0xB4, 0x06, 0xBA, 0x01, 0x00, 0x81, 0xC5, 0x00, 0x08, 0xCD, 0x1B, 0x72, 0x34, 0xBA, 0x04, 0x00, 0xF7, 0xC3, 0x00, 0xAA, 0x74, 0x03, 0xBA, 0x02, 0x00, 0xB4, 0x06, 0xBB, 0x00, 0x1C, 0x81, 0xC5, 0x00, 0x08, 0xCD, 0x1B, 0x72, 0x1B, 0x50, 0x8B, 0xC5, 0xB1, 0x04, 0xD3, 0xE8, 0x8C, 0xC1, 0x03, 0xC1, 0x8B, 0xF0, 0x58, 0xE8, 0x15, 0x00, 0x2E, 0x89, 0x36, 0x0A, 0x00, 0x2E, 0xFF, 0x1E, 0x08, 0x00, 0xE8, 0x08, 0x00, 0xB4, 0x0E, 0xCD, 0x1B, 0xB9, 0x01, 0x00, 0xCB, 0x56, 0xA0, 0x84, 0x05, 0x32, 0xDB, 0xB4, 0x14, 0xCD, 0x1B, 0x72, 0x0E, 0x80, 0xFB, 0x84, 0x75, 0x09, 0x2E, 0xC6, 0x06, 0xC6, 0x49, 0x00, 0xE8, 0x02, 0x00, 0x5E, 0xC3, 0xB4, 0xB0, 0xBE, 0xC2, 0x49, 0xBA, 0x06, 0x00, 0x1E, 0x0E, 0x1F, 0xCD, 0x1B, 0xB4, 0xB0, 0xCD, 0x1B, 0x1F, 0xC3, 0x1E, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x09, 0x00, 0x55, 0xAA, },
            PartInfoStart = 0x1100 - headerOffset,
            PartInfo = new byte[] { 0xA1, 0x81, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x58, 0x02, 0x4D, 0x53, 0x2D, 0x44, 0x4F, 0x53, 0x20, 0x36, 0x2E, 0x32, 0x30, 0x20, 0x20, 0x20, 0x20, 0x20, },
            E5Start = 0x1200 - headerOffset,
            BootloaderStart = 0x1400 - headerOffset,
            BootloaderEnd = 0x3400 - headerOffset,
            BpbStart = 0xD600 - headerOffset,
            BpbContent = new byte[] { 0xEB, 0x45, 0x90, 0x4E, 0x45, 0x43, 0x20, 0x20, 0x36, 0x2E, 0x32, 0x00, 0x04, 0x08, 0x01, 0x00, 0x02, 0x00, 0x07, 0x04, 0x74, 0xF8, 0x06, 0x00, 0x21, 0x00, 0x06, 0x00, 0xC6, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x29, 0xFB, 0x1C, 0x09, 0x21, 0x24, 0x49, 0x4E, 0x53, 0x54, 0x41, 0x4C, 0x24, 0x24, 0x24, 0x24, 0x46, 0x41, 0x54, 0x31, 0x32, 0x20, 0x20, 0x20, 0xC6, 0x00, 0x00, 0x00, 0x14, 0x01, 0x00, 0x01, 0x00, 0x33, 0xC0, 0x8E, 0xC0, 0x8E, 0xD0, 0xBC, 0x8E, 0x02, 0x56, 0x0E, 0x1F, 0xA1, 0x16, 0x00, 0x32, 0xED, 0x8A, 0x0E, 0x10, 0x00, 0xF7, 0xE1, 0x03, 0x06, 0x0E, 0x00, 0xF7, 0x26, 0x0B, 0x00, 0xF7, 0x36, 0x44, 0x00, 0x8B, 0x0E, 0x3E, 0x00, 0x03, 0xC8, 0x8B, 0x16, 0x40, 0x00, 0x83, 0xD2, 0x00, 0x8B, 0x1E, 0x44, 0x00, 0xBD, 0x00, 0x06, 0x8B, 0xFD, 0xE8, 0xEE, 0x00, 0x73, 0x03, 0xE9, 0xAE, 0x00, 0xB8, 0xF2, 0x70, 0xBE, 0x84, 0x72, 0x2B, 0xF0, 0x26, 0xF6, 0x45, 0x0B, 0x08, 0x74, 0x03, 0x83, 0xC7, 0x20, 0xB9, 0x0B, 0x00, 0xFC, 0xF3, 0xA6, 0x74, 0x03, 0xE9, 0x8C, 0x00, 0xBF, 0x20, 0x06, 0x26, 0xF6, 0x45, 0xEB, 0x08, 0x74, 0x03, 0x83, 0xC7, 0x20, 0xB8, 0xF2, 0x70, 0xBE, 0x8F, 0x72, 0x2B, 0xF0, 0xB9, 0x0B, 0x00, 0xF3, 0xA6, 0x75, 0x70, 0x06, 0x1F, 0x33, 0xC9, 0x2E, 0x8B, 0x0E, 0x42, 0x00, 0x2E, 0x03, 0x0E, 0x3E, 0x00, 0x2E, 0x8B, 0x16, 0x40, 0x00, 0x83, 0xD2, 0x00, 0xBB, 0x00, 0xF8, 0xB8, 0x60, 0x00, 0x8E, 0xC0, 0x33, 0xED, 0xE8, 0x8D, 0x00, 0x72, 0x50, 0x53, 0xBB, 0x00, 0x01, 0x36, 0xA0, 0x84, 0x05, 0x24, 0x7F, 0xB4, 0x84, 0x52, 0x51, 0xCD, 0x1B, 0x59, 0x5A, 0x58, 0x52, 0x33, 0xD2, 0xF7, 0xF3, 0x5A, 0x03, 0xC8, 0x83, 0xD2, 0x00, 0xBB, 0x00, 0x08, 0xBD, 0x00, 0x10, 0x8E, 0xC5, 0x33, 0xED, 0xE8, 0x60, 0x00, 0x72, 0x23, 0xBD, 0xE0, 0x0F, 0x8E, 0xC5, 0x8E, 0xDD, 0xBE, 0x00, 0x02, 0xBF, 0x00, 0x00, 0xB9, 0x00, 0x08, 0xFC, 0xF3, 0xA4, 0xBD, 0x60, 0x00, 0x8E, 0xC5, 0x5E, 0xEA, 0x00, 0x00, 0x60, 0x00, 0xBE, 0x9A, 0x72, 0xEB, 0x03, 0xBE, 0xAA, 0x72, 0xB8, 0xF2, 0x70, 0x2B, 0xF0, 0x06, 0x33, 0xC0, 0x8E, 0xC0, 0xB8, 0x00, 0xA0, 0x26, 0xF6, 0x06, 0x01, 0x05, 0x08, 0x74, 0x03, 0xB8, 0x00, 0xE0, 0x07, 0xBB, 0x40, 0x01, 0x8C, 0xCA, 0x8E, 0xDA, 0x8A, 0x0C, 0x0A, 0xC9, 0x74, 0x0B, 0x8E, 0xD8, 0x88, 0x0F, 0x43, 0x43, 0x46, 0x8E, 0xDA, 0xEB, 0xEF, 0xB0, 0x06, 0xE6, 0x37, 0xF4, 0xEB, 0xFD, 0x36, 0xA0, 0x84, 0x05, 0x24, 0x7F, 0x36, 0xC6, 0x06, 0x8E, 0x02, 0x03, 0xB4, 0x06, 0xCD, 0x1B, 0x73, 0x0E, 0x36, 0xFE, 0x0E, 0x8E, 0x02, 0x74, 0x06, 0xB4, 0x07, 0xCD, 0x1B, 0xEB, 0xED, 0xF9, 0xC3, 0x49, 0x4F, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x53, 0x59, 0x53, 0x4D, 0x53, 0x44, 0x4F, 0x53, 0x20, 0x20, 0x20, 0x53, 0x59, 0x53, 0x4E, 0x4F, 0x20, 0x53, 0x59, 0x53, 0x54, 0x45, 0x4D, 0x20, 0x46, 0x49, 0x4C, 0x45, 0x53, 0x00, 0x49, 0x2F, 0x4F, 0x20, 0x45, 0x52, 0x52, 0x4F, 0x52, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, },
            FatStart = 0xda00 - headerOffset,
            FatEnd = 0xf200 - headerOffset,
            FatContent = new byte[] { 0xFE, 0xFF, 0xFF },
            RootSectorStart = 0x10A00 - headerOffset,
            RootSectorEnd = 0x1EA00 - headerOffset,
        };

        private static FormatData img40 = new FormatData {
            IplStart = 0x1000 - headerOffset,
            IplContent = new byte[] { 0xEB, 0x0A, 0x90, 0x90, 0x49, 0x50, 0x4C, 0x31, 0x00, 0x00, 0x00, 0x1E, 0xA0, 0x84, 0x05, 0xB4, 0x8E, 0xCD, 0x1B, 0xA8, 0x20, 0x74, 0x22, 0x32, 0xDB, 0xB4, 0x14, 0xCD, 0x1B, 0x72, 0x1A, 0x80, 0xFB, 0x84, 0x75, 0x15, 0xE8, 0x96, 0x00, 0x73, 0x03, 0xEB, 0x6B, 0x90, 0xB4, 0x24, 0xBB, 0x00, 0x04, 0xB9, 0x30, 0x12, 0xBA, 0x40, 0x01, 0xCD, 0x1B, 0xBB, 0x00, 0x01, 0xB4, 0x84, 0xCD, 0x1B, 0xB4, 0x06, 0x33, 0xC9, 0x33, 0xD2, 0x50, 0x8C, 0xC8, 0x2D, 0xC0, 0x03, 0x8E, 0xC0, 0x58, 0x33, 0xED, 0xCD, 0x1B, 0x72, 0x41, 0xB4, 0x06, 0xBA, 0x01, 0x00, 0x81, 0xC5, 0x00, 0x08, 0xCD, 0x1B, 0x72, 0x34, 0xBA, 0x04, 0x00, 0xF7, 0xC3, 0x00, 0xAA, 0x74, 0x03, 0xBA, 0x02, 0x00, 0xB4, 0x06, 0xBB, 0x00, 0x1C, 0x81, 0xC5, 0x00, 0x08, 0xCD, 0x1B, 0x72, 0x1B, 0x50, 0x8B, 0xC5, 0xB1, 0x04, 0xD3, 0xE8, 0x8C, 0xC1, 0x03, 0xC1, 0x8B, 0xF0, 0x58, 0xE8, 0x15, 0x00, 0x2E, 0x89, 0x36, 0x0A, 0x00, 0x2E, 0xFF, 0x1E, 0x08, 0x00, 0xE8, 0x08, 0x00, 0xB4, 0x0E, 0xCD, 0x1B, 0xB9, 0x01, 0x00, 0xCB, 0x56, 0xA0, 0x84, 0x05, 0x32, 0xDB, 0xB4, 0x14, 0xCD, 0x1B, 0x72, 0x0E, 0x80, 0xFB, 0x84, 0x75, 0x09, 0x2E, 0xC6, 0x06, 0xC6, 0x49, 0x00, 0xE8, 0x02, 0x00, 0x5E, 0xC3, 0xB4, 0xB0, 0xBE, 0xC2, 0x49, 0xBA, 0x06, 0x00, 0x1E, 0x0E, 0x1F, 0xCD, 0x1B, 0xB4, 0xB0, 0xCD, 0x1B, 0x1F, 0xC3, 0x1E, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x09, 0x00, 0x55, 0xAA, },
            PartInfoStart = 0x1100 - headerOffset,
            PartInfo = new byte[] { 0xA1, 0x91, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x58, 0x02, 0x4D, 0x53, 0x2D, 0x44, 0x4F, 0x53, 0x20, 0x36, 0x2E, 0x32, 0x30, 0x20, 0x20, 0x20, 0x20, 0x20, },
            E5Start = 0x1200 - headerOffset,
            BootloaderStart = 0x1400 - headerOffset,
            BootloaderEnd = 0x3400 - headerOffset,
            BpbStart = 0x11800 - headerOffset,
            BpbContent = new byte[] { 0xEB, 0x45, 0x90, 0x4E, 0x45, 0x43, 0x20, 0x20, 0x36, 0x2E, 0x32, 0x00, 0x04, 0x02, 0x01, 0x00, 0x02, 0x00, 0x0C, 0xB0, 0x9A, 0xF8, 0x27, 0x00, 0x21, 0x00, 0x08, 0x00, 0x08, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x29, 0x00, 0x1D, 0x09, 0x3A, 0x24, 0x49, 0x4E, 0x53, 0x54, 0x41, 0x4C, 0x24, 0x24, 0x24, 0x24, 0x46, 0x41, 0x54, 0x31, 0x36, 0x20, 0x20, 0x20, 0x08, 0x01, 0x00, 0x00, 0xBC, 0x02, 0x00, 0x01, 0x00, 0x33, 0xC0, 0x8E, 0xC0, 0x8E, 0xD0, 0xBC, 0x8E, 0x02, 0x56, 0x0E, 0x1F, 0xA1, 0x16, 0x00, 0x32, 0xED, 0x8A, 0x0E, 0x10, 0x00, 0xF7, 0xE1, 0x03, 0x06, 0x0E, 0x00, 0xF7, 0x26, 0x0B, 0x00, 0xF7, 0x36, 0x44, 0x00, 0x8B, 0x0E, 0x3E, 0x00, 0x03, 0xC8, 0x8B, 0x16, 0x40, 0x00, 0x83, 0xD2, 0x00, 0x8B, 0x1E, 0x44, 0x00, 0xBD, 0x00, 0x06, 0x8B, 0xFD, 0xE8, 0xEE, 0x00, 0x73, 0x03, 0xE9, 0xAE, 0x00, 0xB8, 0xF2, 0x70, 0xBE, 0x84, 0x72, 0x2B, 0xF0, 0x26, 0xF6, 0x45, 0x0B, 0x08, 0x74, 0x03, 0x83, 0xC7, 0x20, 0xB9, 0x0B, 0x00, 0xFC, 0xF3, 0xA6, 0x74, 0x03, 0xE9, 0x8C, 0x00, 0xBF, 0x20, 0x06, 0x26, 0xF6, 0x45, 0xEB, 0x08, 0x74, 0x03, 0x83, 0xC7, 0x20, 0xB8, 0xF2, 0x70, 0xBE, 0x8F, 0x72, 0x2B, 0xF0, 0xB9, 0x0B, 0x00, 0xF3, 0xA6, 0x75, 0x70, 0x06, 0x1F, 0x33, 0xC9, 0x2E, 0x8B, 0x0E, 0x42, 0x00, 0x2E, 0x03, 0x0E, 0x3E, 0x00, 0x2E, 0x8B, 0x16, 0x40, 0x00, 0x83, 0xD2, 0x00, 0xBB, 0x00, 0xF8, 0xB8, 0x60, 0x00, 0x8E, 0xC0, 0x33, 0xED, 0xE8, 0x8D, 0x00, 0x72, 0x50, 0x53, 0xBB, 0x00, 0x01, 0x36, 0xA0, 0x84, 0x05, 0x24, 0x7F, 0xB4, 0x84, 0x52, 0x51, 0xCD, 0x1B, 0x59, 0x5A, 0x58, 0x52, 0x33, 0xD2, 0xF7, 0xF3, 0x5A, 0x03, 0xC8, 0x83, 0xD2, 0x00, 0xBB, 0x00, 0x08, 0xBD, 0x00, 0x10, 0x8E, 0xC5, 0x33, 0xED, 0xE8, 0x60, 0x00, 0x72, 0x23, 0xBD, 0xE0, 0x0F, 0x8E, 0xC5, 0x8E, 0xDD, 0xBE, 0x00, 0x02, 0xBF, 0x00, 0x00, 0xB9, 0x00, 0x08, 0xFC, 0xF3, 0xA4, 0xBD, 0x60, 0x00, 0x8E, 0xC5, 0x5E, 0xEA, 0x00, 0x00, 0x60, 0x00, 0xBE, 0x9A, 0x72, 0xEB, 0x03, 0xBE, 0xAA, 0x72, 0xB8, 0xF2, 0x70, 0x2B, 0xF0, 0x06, 0x33, 0xC0, 0x8E, 0xC0, 0xB8, 0x00, 0xA0, 0x26, 0xF6, 0x06, 0x01, 0x05, 0x08, 0x74, 0x03, 0xB8, 0x00, 0xE0, 0x07, 0xBB, 0x40, 0x01, 0x8C, 0xCA, 0x8E, 0xDA, 0x8A, 0x0C, 0x0A, 0xC9, 0x74, 0x0B, 0x8E, 0xD8, 0x88, 0x0F, 0x43, 0x43, 0x46, 0x8E, 0xDA, 0xEB, 0xEF, 0xB0, 0x06, 0xE6, 0x37, 0xF4, 0xEB, 0xFD, 0x36, 0xA0, 0x84, 0x05, 0x24, 0x7F, 0x36, 0xC6, 0x06, 0x8E, 0x02, 0x03, 0xB4, 0x06, 0xCD, 0x1B, 0x73, 0x0E, 0x36, 0xFE, 0x0E, 0x8E, 0x02, 0x74, 0x06, 0xB4, 0x07, 0xCD, 0x1B, 0xEB, 0xED, 0xF9, 0xC3, 0x49, 0x4F, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x53, 0x59, 0x53, 0x4D, 0x53, 0x44, 0x4F, 0x53, 0x20, 0x20, 0x20, 0x53, 0x59, 0x53, 0x4E, 0x4F, 0x20, 0x53, 0x59, 0x53, 0x54, 0x45, 0x4D, 0x20, 0x46, 0x49, 0x4C, 0x45, 0x53, 0x00, 0x49, 0x2F, 0x4F, 0x20, 0x45, 0x52, 0x52, 0x4F, 0x52, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, },
            FatStart = 0x11C00 - headerOffset,
            FatEnd = 0x1B800 - headerOffset,
            FatContent = new byte[] { 0xFE, 0xFF, 0xFF, 0xFF },
            RootSectorStart = 0x25400 - headerOffset,
            RootSectorEnd = 0x3F400 - headerOffset,
        };

        public static void FormatStream(int size, Stream s, PC98FatFileSystem fs) {
            FormatData format;
            if (size == 5) {
                format = img5;
            } else if (size == 10) {
                format = img10;
            } else if (size == 15) {
                format = img15;
            } else if (size == 20) {
                format = img20;
            } else if (size == 30) {
                format = img30;
            } else if (size == 40) {
                format = img40;
            } else {
                throw new ArgumentOutOfRangeException();
            }
            s.Position = format.IplStart;
            s.Write(format.IplContent, 0, format.IplContent.Length);
            FillZero(s, format.E5Start);
            s.Position = format.PartInfoStart;
            s.Write(format.PartInfo, 0, format.PartInfo.Length);
            s.Position = format.E5Start;
            FillE5(s);
            s.Position = format.BootloaderStart;
            FillZero(s, format.BootloaderEnd);
            s.Position = format.BpbStart;
            s.Write(format.BpbContent, 0, format.BpbContent.Length);
            s.Position = format.FatStart;
            // первая копия FAT
            s.Write(format.FatContent, 0, format.FatContent.Length);
            // заполняем нулями до конца FAT
            FillZero(s, format.RootSectorStart);
            // вторая копия FAT
            s.Position = format.FatEnd;
            s.Write(format.FatContent, 0, format.FatContent.Length);
            s.Position = format.RootSectorStart;
            for (var i = 0; i < (format.RootSectorEnd - format.RootSectorEnd); i += 32) {
                s.WriteByte(0);
                s.Position += 31;
            }
            WriteBootloader(s, fs, format);
        }

        private static void WriteBootloader(Stream s, PC98FatFileSystem fs, FormatData format) {
            using (var fh = fs.OpenFile(@"\HDFORMAT.EXE", FileMode.Open)) {
                var sub = new byte[] {
                    0xE9, 0xD1, 0x02, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
                    0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
                };
                var buf = new byte[0x1000];
                var readPos = fh.Position;
                var len = format.BootloaderEnd - format.BootloaderStart;
                var currPos = fh.Position;
                var found = false;
                while (fh.Position < fh.Length) {
                    currPos = fh.Position;
                    fh.Read(buf, 0, buf.Length);
                    var pos = FindSub(buf, sub);
                    if (pos > (buf.Length - sub.Length)) {
                        fh.Position = pos;
                        continue;
                    }
                    if (pos >= 0) {
                        currPos = currPos + pos;
                        found = true;
                        break;
                    }
                }
                if (!found) {
                    throw new EntryPointNotFoundException("Can't find bootloader fingerprint in the HDFORMAT.EXE");
                }
                fh.Position = currPos;
                s.Position = format.BootloaderStart;
                fh.Read(buf, 0, buf.Length);
                s.Write(buf, 0, buf.Length);
                fh.Read(buf, 0, buf.Length);
                s.Write(buf, 0, buf.Length);
            }
        }

        private static int FindSub(byte[] buf, byte[] sub) {
            var i = 0;
            var j = 0;
            for (; i < buf.Length && j < sub.Length; i++) {
                if (buf[i] == sub[j]) {
                    j++;
                } else {
                    j = 0;
                }
            }
            if (j < sub.Length) return -1;
            return i - sub.Length;
        }

        private static void FillZero(Stream s, int position) {
            if (s.Position >= position) return;
            var buffer = new byte[256];
            for (var i = 0; i < buffer.Length; i++) {
                buffer[i] = 0;
            }
            for (var i = s.Position; i < position; i+= 256) {
                var len = ((position - i) >= 256) ? 256 : (position - i);
                s.Write(buffer, 0, (int)len);
            }
        }

        private static void FillE5(Stream s) {
            var buf = new byte[1024];
            for (var i = 0; i < buf.Length; i++) {
                buf[i] = 0xe5;
            }
            for (var i = s.Position; i < s.Length; i += 1024) {
                var len = ((s.Length - i) >= 1024) ? 1024 : (s.Length - i);
                s.Write(buf, 0, (int)len);
            }
        }

        public static void CreateDisk() {
            var filename = @"D:\Translations\Tools\Patcher\images\newdisk_empty40.hdi";
            using (var fh = File.Create(filename)) {
                using (var disk = Disk.InitializeFixed(fh, Ownership.None, HddType.Size40Mb)) {
                    using (var source = DiscUtils.Fdi.Disk.OpenDisk(@"S:\Translations\Patcher\dos1.fdi", FileAccess.Read)) {
                        using (var fs = new PC98FatFileSystem(source.Content)) {
                            var s = disk.Content;
                            FormatStream(40, s, fs);
                            using (var partStream = disk.Partitions[0].Open()) {
                                using (var newfs = new PC98FatFileSystem(partStream)) {
                                    CopySysFiles(fs, newfs);
                                }
                            }
                        }
                    }
                }
            }
        }

        private static void CopySysFiles(PC98FatFileSystem fs, PC98FatFileSystem newfs) {
            var files = new string[] {@"\IO.SYS", @"\MSDOS.SYS", @"\COMMAND.COM", @"\CONFIG.SYS"};
            foreach (var file in files) {
                using (var dst = newfs.OpenFile(file, FileMode.CreateNew)) {
                    using (var src = fs.OpenFile(file, FileMode.Open)) {
                        src.CopyTo(dst);
                    }
                }
            }
            using (var dst = newfs.OpenFile(@"\HIMEM.SYS", FileMode.CreateNew)) {
                using (var src = fs.OpenFile(@"\HIMEM.SY_", FileMode.Open)) {
                    UnpackMSLZ(src, dst);
                }
            }
        }

        private static void ShowDir(DiscDirectoryInfo dirInfo, int indent) {
            Debug.WriteLine("{0}{1,-50} [{2}]", new String(' ', indent), dirInfo.FullName, dirInfo.CreationTimeUtc);
            foreach (DiscDirectoryInfo subDir in dirInfo.GetDirectories()) {
                ShowDir(subDir, indent + 0);
            }
            foreach (DiscFileInfo file in dirInfo.GetFiles()) {
                Debug.WriteLine("{0}{1,-50} [{2}]", new String(' ', indent), file.FullName, file.CreationTimeUtc);
            }
        }

        public static void UnpackMSLZ(Stream inStream, Stream outStream) {
            var header = new byte[] {0x53, 0x5A, 0x44, 0x44, 0x88, 0xF0, 0x27, 0x33};
            var window = new byte[4096];
            var readedHeader = new byte[14];
            inStream.Read(readedHeader, 0, 14);
            for (var i = 0; i < header.Length; i++) {
                if (header[i] != readedHeader[i]) {
                    throw new BadImageFormatException("Packed MSLZ header mismatch");
                }
            }
            var length = 0;
            for (var i = 0; i < 4; i++) {
                length |= (readedHeader[0x0a + i] << (i * 8));
            }
            var pos = 4096 - 16;
            for (var i = 0; i < window.Length; i++) {
                window[i] = 0x20;
            }
            while (outStream.Position < length) {
                int control = inStream.ReadByte();
                if (control < 0) break;
                for (var cbit = 0x01; (cbit & 0x000000ff) > 0 && outStream.Position < length; cbit <<= 1) {
                    if ((control & cbit) > 0) {
                        byte b = (byte) inStream.ReadByte();
                        window[pos++] = b;
                        pos &= 0x00000fff;
                        outStream.WriteByte(b);
                    } else {
                        var matchpos = inStream.ReadByte();
                        var matchlen = inStream.ReadByte();
                        matchpos |= (matchlen & 0x000000f0) << 4;
                        matchpos &= 0x00000fff;
                        matchlen = (matchlen & 0x0000000f) + 3;
                        while (matchlen-- > 0 && outStream.Position < length) {
                            var b = window[matchpos];
                            matchpos++;
                            window[pos++] = b;
                            outStream.WriteByte(b);
                            pos &= 0x00000fff;
                            matchpos &= 0x00000fff;
                        }
                    }
                }
            }
        }

        /*char window[4096];
int pos = 4096 - 16;
memset(window, 0x20, 4096); /* window initially full of spaces *
        for (;;) {
            int control = GETBYTE();
            if (control == EOF) break; /* exit if no more to read *
            for (int cbit = 0x01; cbit & 0xFF; cbit <<= 1) {
                if (control & cbit) {
                    /* literal *
                    PUTBYTE(window[pos++] = GETBYTE());
                }
                else {
                    /* match *
                    int matchpos = GETBYTE();
                    int matchlen = GETBYTE();
                    matchpos |= (matchlen & 0xF0) << 4;
                    matchlen = (matchlen & 0x0F) + 3;
                    while (matchlen--) {
                        PUTBYTE(window[pos++] = window[matchpos++]);
                        pos &= 4095; matchpos &= 4095;
                    }
                }
            }
        }*/
    }
}
